/*
 *    Copyright 2013 Information Control Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.simpliccity.styleguide.maven.util.annotation;

import java.io.File;
import java.util.List;

import org.apache.maven.plugin.descriptor.PluginDescriptor;

/**
 * Specifies the operations used to apply annotation processing to a codebase
 * within the context of a Maven plugin.
 *  
 * @author Kevin Fox
 *
 */
public interface AnnotationProcessor 
{
	/**
	 * The component <code>role</code> hint for the Plexus container.
	 */
	String ROLE = AnnotationProcessor.class.getName();
	
	/**
	 * Applies a specified set of annotation processors to the code in a list of source locations.  The 
	 * annotation processors must exist within the specified classpath entries.
	 * 
	 * @param sourceLocations The list of base paths for the source code to scan.
	 * @param buildDirectory The folder to which any resulting output will be written.
	 * @param annotationProcessors A list of the class names of the annotation processors to apply to the source code.
	 * @param classpathEntries The classpath entries which contain the annotation processors and related code.
	 * @return A list of messages, if any, that are generated by annotation scanning.
	 * @throws AnnotationProcessorException If the annotation scan fails.
	 * @see javax.annotation.processing.Processor
	 */
	List<String> processAnnotations(List<String> sourceLocations, File buildDirectory, String[] annotationProcessors, List<String> classpathEntries) throws AnnotationProcessorException;

	/**
	 * Applies a specified set of annotation processors to the code in a list of source locations.  The 
	 * annotation processors must exist within the dependencies of the specified Maven plugin.
	 * 
	 * @param sourceLocations The list of base paths for the source code to scan.
	 * @param buildDirectory The folder to which any resulting output will be written.
	 * @param annotationProcessors A list of the class names of the annotation processors to apply to the source code.
	 * @param descriptor The descriptor of the Maven plugin initiating the annotation scan.
	 * @return A list of messages, if any, that are generated by annotation scanning.
	 * @throws AnnotationProcessorException If the annotation scan fails.
	 * @see javax.annotation.processing.Processor
	 */
	List<String> processAnnotations(List<String> sourceLocations, File buildDirectory, String[] annotationProcessors, PluginDescriptor descriptor) throws AnnotationProcessorException;
}
